---
import { type CollectionEntry, getCollection } from 'astro:content'
import BlogPostLayout from '../../layouts/BlogPostLayout.astro'
import type { MarkdownHeading } from 'astro'

export async function getStaticPaths() {
	const posts = await getCollection('blog')
	const headings = await Promise.all(
		posts.map(async (post) => {
			const data = await post.render()
			return data.headings
		})
	)
	return posts.map((post, index) => ({
		params: { slug: post.slug },
		props: {
			post,
			headings: headings[index],
			slug: post.slug,
			allPosts: posts,
		},
	}))
}

type Props = {
	post: CollectionEntry<'blog'>
	headings: MarkdownHeading[]
	slug: string
	allPosts: CollectionEntry<'blog'>[]
}

const { post, headings, slug, allPosts } = Astro.props
const { Content, remarkPluginFrontmatter } = await post.render()

// 获取其他博客文章（排除当前文章，按日期排序，取前3篇）
const otherPosts = allPosts
	.filter((p) => p.slug !== slug)
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
	.slice(0, 3)

// 获取最近的5篇文章（不是当前文章）
const lastPosts = allPosts
	.filter((p) => p.slug !== slug)
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
	.slice(0, 5)
---

<BlogPostLayout
	{...post.data}
	headings={headings}
	slug={slug}
	remarkPluginFrontmatter={remarkPluginFrontmatter}
	otherPosts={otherPosts}
	lastPost={lastPosts}
>
	<Content />
</BlogPostLayout>
