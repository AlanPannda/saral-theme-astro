---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '../components/FormattedDate.astro'
import type { MarkdownHeading, ImageMetadata } from 'astro'
import TableOfContents from '../components/TableOfContents.astro'
import BlogListHorizontal from '../components/BlogListHorizontal.astro'
import BlogListSmall from '../components/BlogListSmall.astro'
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
import BaseLayout from './BaseLayout.astro'
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'
import { Badge } from '../components/ui/badge'
import { SITE_BASE } from '@/consts'
import {
	Breadcrumb,
	BreadcrumbList,
	BreadcrumbItem,
	BreadcrumbLink,
	BreadcrumbSeparator,
	BreadcrumbPage,
} from '../components/ui/breadcrumb'

dayjs.extend(utc)

type Props = CollectionEntry<'blog'>['data'] & {
	headings: MarkdownHeading[]
	slug: string
	remarkPluginFrontmatter: Record<string, string>
	otherPosts?: CollectionEntry<'blog'>[]
	lastPost?: CollectionEntry<'blog'>[]
}

const {
	title,
	description,
	pubDate,
	updatedDate,
	coverImageCredit,
	headings,
	slug,
	remarkPluginFrontmatter,
	tag,
	otherPosts,
	lastPost,
} = Astro.props

const blogImages = import.meta.glob<{ default: ImageMetadata }>(
	'/src/assets/blogimages/**/*.{jpeg,jpg,png,gif}'
)

const coverImagePath = `/src/assets/blogimages/${slug}/cover.jpg`

// 检查 coverImageCredit 是否是图片路径（以 / 开头）
const isCoverImagePath = coverImageCredit?.startsWith('/')
const coverImageSrc =
	isCoverImagePath && coverImageCredit
		? `${SITE_BASE}${coverImageCredit}`
		: null
const coverImageUrl =
	isCoverImagePath && coverImageSrc ? new URL(coverImageSrc, Astro.site) : null

const lastModified = dayjs(remarkPluginFrontmatter.lastModified)
	.utc()
	.format('D MMM YYYY')
---

<BaseLayout
	title={title}
	description={description}
	image={isCoverImagePath && coverImageUrl
		? coverImageUrl.toString()
		: undefined}
>
	<main>
		<article>
			<div
				class="app-container flex flex-col lg:flex-row-reverse justify-between gap-8 py-24 relative"
			>
				<div class="md:w-1/4 relative">
					<div class="sticky top-0 md:top-28 hidden lg:block">
						<TableOfContents headings={headings} />

						{/* 最后一篇文章 */}
						{
							lastPost && lastPost.length > 0 && (
								<div class="mt-6 pt-8 border-t border-gray-200 dark:border-gray-800">
									<h3 class="text-sm font-semibold mb-4 opacity-70">
										Last Posts
									</h3>
									<BlogListSmall posts={lastPost} />
								</div>
							)
						}
					</div>
				</div>
				<div class="grow w-full md:max-w-[75ch]">
					<div>
						<Breadcrumb client:idle>
							<BreadcrumbList>
								<BreadcrumbItem>
									<BreadcrumbLink href="/">Home</BreadcrumbLink>
								</BreadcrumbItem>
								<BreadcrumbSeparator />
								<BreadcrumbItem>
									<BreadcrumbLink href="/blog">Blog</BreadcrumbLink>
								</BreadcrumbItem>
								<BreadcrumbSeparator />
								<BreadcrumbItem>
									<BreadcrumbPage>{title}</BreadcrumbPage>
								</BreadcrumbItem>
							</BreadcrumbList>
						</Breadcrumb>
						<h1 class="text-4xl sm:text-5xl leading-snug pt-12 font-bold">
							{title}
						</h1>
						<div class="text-lg flex items-center gap-4 flex-wrap py-8">
							<!-- Publish date -->
							<span>
								<Icon
									name="mdi:calendar-month-outline"
									class="inline-block text-primary dark:text-primary-dark"
								/>
								<FormattedDate date={pubDate} />
							</span>

							<!-- Updated date -->
							{
								updatedDate && (
									<span>
										<Icon
											name="mdi:calendar-refresh-outline"
											class="inline-block text-primary dark:text-primary-dark"
										/>
										Last updated on <FormattedDate date={updatedDate} />
									</span>
								)
							}

							<!-- Read time -->
							<span>
								<Icon
									name="mdi:clock-time-four-outline"
									class="inline-block text-primary dark:text-primary-dark"
								/>
								{remarkPluginFrontmatter.minutesRead}
							</span>
						</div>

						{
							isCoverImagePath && coverImageSrc ? (
								<>
									<img src={coverImageSrc} alt={title} class="rounded-lg" />
								</>
							) : (
								blogImages[coverImagePath] && (
									<>
										<Image
											src={blogImages[coverImagePath]()}
											alt={title}
											class="rounded-lg"
										/>
										{coverImageCredit && (
											<p class="mt-2 mb-8 opacity-80 italic text-sm">
												Image Credit: {coverImageCredit}
											</p>
										)}
									</>
								)
							)
						}
					</div>
					<div
						class="mt-8 prose prose-neutral prose-lg md:prose-xl dark:prose-invert prose-img:rounded-xl prose-figure:text-center prose-img:mx-auto"
					>
						<slot />
					</div>

					<!-- Tags -->
					<div class="flex justify-between mt-16 gap-4 flex-wrap items-center">
						<div class="flex items-center gap-3 flex-wrap">
							{
								tag &&
									tag.map((t: string) => <Badge variant="secondary">{t}</Badge>)
							}
						</div>
						<p class="opacity-70 italic">
							Last modified: {lastModified}
						</p>
					</div>

					<!-- 相关博客文章 -->
					{
						otherPosts && otherPosts.length > 0 && (
							<div class="mt-16 pt-16 border-t-2 border-gray-200 dark:border-gray-800">
								<h2 class="text-3xl font-bold mb-8">更多文章</h2>
								<BlogListHorizontal posts={otherPosts} />
							</div>
						)
					}
				</div>
			</div>
		</article>
	</main>
</BaseLayout>
